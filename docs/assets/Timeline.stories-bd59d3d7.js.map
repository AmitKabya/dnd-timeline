{"version":3,"file":"Timeline.stories-bd59d3d7.js","sources":["../../stories/1 - Timeline/index.tsx"],"sourcesContent":["import React, { useCallback, useMemo, useState } from 'react'\n\nimport {\n  Relevance,\n  Timeframe,\n  ResizeEndEvent,\n  GridSizeDefinition,\n  Timeline as TimelineContext,\n} from 'dnd-timeline'\n\nimport {\n  endOfDay,\n  startOfDay,\n  hoursToMilliseconds,\n  minutesToMilliseconds,\n} from 'date-fns'\nimport {\n  Active,\n  DragOverlay,\n  DragEndEvent,\n  DragMoveEvent,\n  DragStartEvent,\n} from '@dnd-kit/core'\n\nimport { generateItems, generateRows } from '../utils'\n\nimport Timeline, { ItemOverlay } from '../components/Timeline'\n\nconst DEFAULT_TIMEFRAME: Timeframe = {\n  start: startOfDay(new Date()),\n  end: endOfDay(new Date()),\n}\n\nexport interface TimelineWrapperProps {\n  rowCount: number\n  itemCount: number\n  timeframe?: Timeframe\n  disabledItemCount?: number\n  disabledRowCount?: number\n  backgroundItemCount?: number\n  generateDroppableMap?: boolean\n}\n\nfunction TimelineWrapper(props: TimelineWrapperProps) {\n  const [timeframe, setTimeframe] = useState<Timeframe>(\n    props.timeframe || DEFAULT_TIMEFRAME\n  )\n\n  const [rows] = useState(() => [\n    ...generateRows(props.rowCount),\n    ...generateRows(props.disabledRowCount || 0, { disabled: true }),\n  ])\n\n  const [items, setItems] = useState(() => [\n    ...generateItems(props.itemCount, timeframe, rows),\n    ...generateItems(props.disabledItemCount || 0, timeframe, rows, {\n      disabled: true,\n    }),\n    ...generateItems(props.backgroundItemCount || 0, timeframe, rows, {\n      background: true,\n    }),\n  ])\n\n  const [draggedItem, setDraggedItem] = useState<Active | null>(null)\n  const [draggedItemTempRelevance, setDraggedItemTempRelevance] =\n    useState<Relevance | null>(null)\n\n  const onDragStart = useCallback(\n    (event: DragStartEvent) => setDraggedItem(event.active),\n    [setDraggedItem]\n  )\n\n  const onDragCancel = useCallback(() => setDraggedItem(null), [setDraggedItem])\n\n  const onDragEnd = useCallback(\n    (event: DragEndEvent) => {\n      const overedId = event.over?.id.toString()\n      if (!overedId) return\n\n      const activeItemId = event.active.id\n\n      const overedType = event.over?.data?.current?.type\n      const activeType = event.active?.data?.current?.type\n      const getRelevanceFromDragEvent =\n        event.active?.data?.current?.getRelevanceFromDragEvent\n\n      const updatedRelevance = getRelevanceFromDragEvent(event)\n\n      if (\n        updatedRelevance &&\n        overedType === 'timeline-row' &&\n        activeType === 'timeline-item'\n      ) {\n        setItems((prev) =>\n          prev.map((item) => {\n            if (item.id !== activeItemId) return item\n\n            return {\n              ...item,\n              rowId: overedId,\n              relevance: updatedRelevance,\n            }\n          })\n        )\n      }\n\n      setDraggedItem(null)\n    },\n    [setItems, setDraggedItem]\n  )\n\n  const onDragMove = useCallback(\n    (event: DragMoveEvent) =>\n      setDraggedItemTempRelevance(\n        event.active.data.current?.getRelevanceFromDragEvent(event)\n      ),\n    []\n  )\n\n  const onResizeEnd = useCallback(\n    (event: ResizeEndEvent) => {\n      const updatedRelevance = event.active.data.current?.relevance\n      if (!updatedRelevance) return\n\n      const activeItemId = event.active.id\n\n      setItems((prev) =>\n        prev.map((item) => {\n          if (item.id !== activeItemId) return item\n\n          return {\n            ...item,\n            relevance: updatedRelevance,\n          }\n        })\n      )\n    },\n    [setItems]\n  )\n\n  const timeframeGridSize = useMemo<GridSizeDefinition[]>(\n    () => [\n      {\n        value: hoursToMilliseconds(1),\n      },\n      {\n        value: minutesToMilliseconds(30),\n        maxTimeframeSize: hoursToMilliseconds(24),\n      },\n      {\n        value: minutesToMilliseconds(15),\n        maxTimeframeSize: hoursToMilliseconds(12),\n      },\n      {\n        value: minutesToMilliseconds(5),\n        maxTimeframeSize: hoursToMilliseconds(6),\n      },\n      {\n        value: minutesToMilliseconds(1),\n        maxTimeframeSize: hoursToMilliseconds(2),\n      },\n    ],\n    []\n  )\n\n  return (\n    <TimelineContext\n      onDragEnd={onDragEnd}\n      onDragMove={onDragMove}\n      onResizeEnd={onResizeEnd}\n      onDragStart={onDragStart}\n      onDragCancel={onDragCancel}\n      timeframe={timeframe}\n      onTimeframeChanged={setTimeframe}\n      timeframeGridSize={timeframeGridSize}\n    >\n      <Timeline rows={rows} items={items} />\n      <DragOverlay>\n        {draggedItem && draggedItemTempRelevance && (\n          <ItemOverlay relevance={draggedItemTempRelevance} />\n        )}\n      </DragOverlay>\n    </TimelineContext>\n  )\n}\n\nexport default TimelineWrapper\n"],"names":["DEFAULT_TIMEFRAME","startOfDay","endOfDay","TimelineWrapper","props","timeframe","setTimeframe","useState","rows","generateRows","items","setItems","generateItems","draggedItem","setDraggedItem","draggedItemTempRelevance","setDraggedItemTempRelevance","onDragStart","useCallback","event","onDragCancel","onDragEnd","overedId","_a","activeItemId","overedType","_d","_c","_b","activeType","_g","_f","_e","updatedRelevance","_j","_i","_h","prev","item","onDragMove","onResizeEnd","timeframeGridSize","useMemo","hoursToMilliseconds","minutesToMilliseconds","jsxs","TimelineContext","jsx","Timeline","DragOverlay","ItemOverlay"],"mappings":"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"}